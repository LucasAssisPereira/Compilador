
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BEGIN COLON COMMA DIVIDE DOT EMPTY END ID INTEGER LPAREN MINUS NUM PLUS PROGRAM READ RPAREN SEMICOLON STRING TIMES VAR WRITEprogram : PROGRAM ID SEMICOLON declarations block DOTdeclarations : VAR declarations_list\n                    | emptydeclarations_list : ID COLON type SEMICOLON declarations_list\n                        | ID COLON type declarations_list\n                        | emptytype : INTEGERblock : BEGIN statements ENDstatements : statement SEMICOLON statements\n                  | emptyexpression : expression PLUS expression\n                  | termexpression : expression COMMA expressionterm : factor\n            | term TIMES factor\n            | term DIVIDE factorfactor : NUMfactor : IDfactor : STRINGstatement : WRITE LPAREN expression RPARENstatement : ID ASSIGN expressionempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,13,],[0,-1,]),'ID':([2,6,9,21,22,23,24,25,34,37,38,39,40,],[3,11,18,18,31,31,11,-7,11,31,31,31,31,]),'SEMICOLON':([3,15,24,25,28,29,30,31,32,33,36,42,43,44,45,],[4,21,34,-7,-12,-14,-17,-18,-19,-21,-20,-11,-13,-15,-16,]),'VAR':([4,],[6,]),'BEGIN':([4,5,6,7,10,12,24,25,34,35,41,],[-22,9,-22,-3,-2,-6,-22,-7,-22,-5,-4,]),'DOT':([8,20,],[13,-8,]),'WRITE':([9,21,],[17,17,]),'END':([9,14,16,21,26,],[-22,20,-10,-22,-9,]),'COLON':([11,],[19,]),'LPAREN':([17,],[22,]),'ASSIGN':([18,],[23,]),'INTEGER':([19,],[25,]),'NUM':([22,23,37,38,39,40,],[30,30,30,30,30,30,]),'STRING':([22,23,37,38,39,40,],[32,32,32,32,32,32,]),'RPAREN':([27,28,29,30,31,32,42,43,44,45,],[36,-12,-14,-17,-18,-19,-11,-13,-15,-16,]),'PLUS':([27,28,29,30,31,32,33,42,43,44,45,],[37,-12,-14,-17,-18,-19,37,37,37,-15,-16,]),'COMMA':([27,28,29,30,31,32,33,42,43,44,45,],[38,-12,-14,-17,-18,-19,38,38,38,-15,-16,]),'TIMES':([28,29,30,31,32,44,45,],[39,-14,-17,-18,-19,-15,-16,]),'DIVIDE':([28,29,30,31,32,44,45,],[40,-14,-17,-18,-19,-15,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([4,],[5,]),'empty':([4,6,9,21,24,34,],[7,12,16,16,12,12,]),'block':([5,],[8,]),'declarations_list':([6,24,34,],[10,35,41,]),'statements':([9,21,],[14,26,]),'statement':([9,21,],[15,15,]),'type':([19,],[24,]),'expression':([22,23,37,38,],[27,33,42,43,]),'term':([22,23,37,38,],[28,28,28,28,]),'factor':([22,23,37,38,39,40,],[29,29,29,29,44,45,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON declarations block DOT','program',6,'p_program','analisador_sintatico.py',6),
  ('declarations -> VAR declarations_list','declarations',2,'p_declarations','analisador_sintatico.py',10),
  ('declarations -> empty','declarations',1,'p_declarations','analisador_sintatico.py',11),
  ('declarations_list -> ID COLON type SEMICOLON declarations_list','declarations_list',5,'p_declarations_list','analisador_sintatico.py',14),
  ('declarations_list -> ID COLON type declarations_list','declarations_list',4,'p_declarations_list','analisador_sintatico.py',15),
  ('declarations_list -> empty','declarations_list',1,'p_declarations_list','analisador_sintatico.py',16),
  ('type -> INTEGER','type',1,'p_type','analisador_sintatico.py',18),
  ('block -> BEGIN statements END','block',3,'p_block','analisador_sintatico.py',21),
  ('statements -> statement SEMICOLON statements','statements',3,'p_statements','analisador_sintatico.py',24),
  ('statements -> empty','statements',1,'p_statements','analisador_sintatico.py',25),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','analisador_sintatico.py',29),
  ('expression -> term','expression',1,'p_expression_binop','analisador_sintatico.py',30),
  ('expression -> expression COMMA expression','expression',3,'p_expression_comma','analisador_sintatico.py',34),
  ('term -> factor','term',1,'p_term_factor','analisador_sintatico.py',38),
  ('term -> term TIMES factor','term',3,'p_term_factor','analisador_sintatico.py',39),
  ('term -> term DIVIDE factor','term',3,'p_term_factor','analisador_sintatico.py',40),
  ('factor -> NUM','factor',1,'p_factor_num','analisador_sintatico.py',43),
  ('factor -> ID','factor',1,'p_factor_id','analisador_sintatico.py',46),
  ('factor -> STRING','factor',1,'p_factor_string','analisador_sintatico.py',49),
  ('statement -> WRITE LPAREN expression RPAREN','statement',4,'p_statement_write','analisador_sintatico.py',52),
  ('statement -> ID ASSIGN expression','statement',3,'p_statement_assign','analisador_sintatico.py',55),
  ('empty -> <empty>','empty',0,'p_empty','analisador_sintatico.py',58),
]
